{"ast":null,"code":"async function getUserLatLong() {\n  const apiUrl = \"https://api.ipgeolocation.io/ipgeo\";\n  const API_KEY = \"71d4bae10351465887eba1f166f1db9c\";\n  let userIp = \"\";\n  let userCoords = {\n    lat: \"\",\n    long: \"\"\n  };\n  await fetch(\"https://api.ipify.org?format=json\", {\n    mode: 'cors',\n    method: \"GET\"\n  }).then(response => response.json()).then(data => {\n    userIp = data.ip;\n    console.log(userIp);\n  }).catch(error => {\n    console.error(\"Error fetching IP address:\", error);\n  });\n  await fetch(`${apiUrl}?apiKey=${API_KEY}&ip=${userIp}`, {\n    mode: 'cors',\n    method: \"GET\"\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  }).then(data => {\n    userCoords.lat = data.latitude;\n    userCoords.long = data.longitude;\n  }).catch(error => {\n    console.error('Error:', error);\n  });\n  return userCoords;\n}\n\n// NY_COORDS = {lat: \"40.7128\", long: \"-74.0060\"};\n// const test = getUserLatLong();\n// test.then(function(result) {\n//     let coords = {};\n//     coords.lat = result.lat;\n//     coords.long = result.long;\n//     console.log(calculateDistance(coords, NY_COORDS));\n// })\n\nexport default getUserLatLong;","map":{"version":3,"names":["getUserLatLong","apiUrl","API_KEY","userIp","userCoords","lat","long","fetch","mode","method","then","response","json","data","ip","console","log","catch","error","ok","Error","latitude","longitude"],"sources":["/Users/emile/Desktop/ITCS 6112/surrounded-by-crime/surrounded-by-crime/src/getCoords.js"],"sourcesContent":["async function getUserLatLong() {\n    const apiUrl = \"https://api.ipgeolocation.io/ipgeo\";\n    const API_KEY = \"71d4bae10351465887eba1f166f1db9c\";\n    let userIp = \"\";\n    let userCoords = {\n        lat: \"\",\n        long: \"\"\n    }\n\n    await fetch(\"https://api.ipify.org?format=json\", {mode: 'cors', method: \"GET\"})\n        .then(response => response.json())\n        .then(data => {\n            userIp = data.ip;\n            console.log(userIp);\n        })\n        .catch(error => {\n            console.error(\"Error fetching IP address:\", error);\n        });\n\n    await fetch(`${apiUrl}?apiKey=${API_KEY}&ip=${userIp}`, {mode: 'cors', method: \"GET\"})\n        .then(response => {\n        if (!response.ok) {\n            throw new Error('Network response was not ok');\n        }\n        return response.json();\n        })\n        .then(data => {\n            userCoords.lat = data.latitude;\n            userCoords.long = data.longitude;\n        })\n        .catch(error => {\n            console.error('Error:', error);\n        });\n    \n    return userCoords;\n}\n\n// NY_COORDS = {lat: \"40.7128\", long: \"-74.0060\"};\n// const test = getUserLatLong();\n// test.then(function(result) {\n//     let coords = {};\n//     coords.lat = result.lat;\n//     coords.long = result.long;\n//     console.log(calculateDistance(coords, NY_COORDS));\n// })\n\nexport default getUserLatLong;"],"mappings":"AAAA,eAAeA,cAAcA,CAAA,EAAG;EAC5B,MAAMC,MAAM,GAAG,oCAAoC;EACnD,MAAMC,OAAO,GAAG,kCAAkC;EAClD,IAAIC,MAAM,GAAG,EAAE;EACf,IAAIC,UAAU,GAAG;IACbC,GAAG,EAAE,EAAE;IACPC,IAAI,EAAE;EACV,CAAC;EAED,MAAMC,KAAK,CAAC,mCAAmC,EAAE;IAACC,IAAI,EAAE,MAAM;IAAEC,MAAM,EAAE;EAAK,CAAC,CAAC,CAC1EC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;IACVV,MAAM,GAAGU,IAAI,CAACC,EAAE;IAChBC,OAAO,CAACC,GAAG,CAACb,MAAM,CAAC;EACvB,CAAC,CAAC,CACDc,KAAK,CAACC,KAAK,IAAI;IACZH,OAAO,CAACG,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;EACtD,CAAC,CAAC;EAEN,MAAMX,KAAK,CAAC,GAAGN,MAAM,WAAWC,OAAO,OAAOC,MAAM,EAAE,EAAE;IAACK,IAAI,EAAE,MAAM;IAAEC,MAAM,EAAE;EAAK,CAAC,CAAC,CACjFC,IAAI,CAACC,QAAQ,IAAI;IAClB,IAAI,CAACA,QAAQ,CAACQ,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAClD;IACA,OAAOT,QAAQ,CAACC,IAAI,CAAC,CAAC;EACtB,CAAC,CAAC,CACDF,IAAI,CAACG,IAAI,IAAI;IACVT,UAAU,CAACC,GAAG,GAAGQ,IAAI,CAACQ,QAAQ;IAC9BjB,UAAU,CAACE,IAAI,GAAGO,IAAI,CAACS,SAAS;EACpC,CAAC,CAAC,CACDL,KAAK,CAACC,KAAK,IAAI;IACZH,OAAO,CAACG,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;EAClC,CAAC,CAAC;EAEN,OAAOd,UAAU;AACrB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeJ,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}